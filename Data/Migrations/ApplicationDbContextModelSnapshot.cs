// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Accounting", b =>
                {
                    b.Property<int>("Accounting_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Accounting_id"));

                    b.Property<DateTime>("Accounting_created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Accounting_egreso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Accounting_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Accounting_ingreso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Accounting_saldo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Accounting_updated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("KgMonitoringKgMonitoring_id")
                        .HasColumnType("int")
                        .HasColumnName("Accounting_IDKgMonitoring");

                    b.Property<int?>("SaleSale_id")
                        .HasColumnType("int")
                        .HasColumnName("Accounting_IdSales");

                    b.HasKey("Accounting_id");

                    b.HasIndex("KgMonitoringKgMonitoring_id");

                    b.HasIndex("SaleSale_id");

                    b.ToTable("Accounting");
                });

            modelBuilder.Entity("Domain.CatalogProduction", b =>
                {
                    b.Property<int>("CatalogProduction_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatalogProduction_id"));

                    b.Property<DateTime>("CatalogProduction_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CatalogProduction_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CatalogProduction_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CatalogProduction_updated")
                        .HasColumnType("datetime2");

                    b.HasKey("CatalogProduction_id");

                    b.ToTable("CatalogProduction");
                });

            modelBuilder.Entity("Domain.DataCatalogProduct", b =>
                {
                    b.Property<int>("DataCatalogProduct_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataCatalogProduct_id"));

                    b.Property<int>("CatalogProductionCatalogProduction_id")
                        .HasColumnType("int")
                        .HasColumnName("DataCatalogProduct_IDCatalogProduct");

                    b.Property<int>("DataCatalogProduct_countTotal")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCatalogProduct_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataCatalogProduct_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCatalogProduct_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("KG_CatalogKGCatalog_id")
                        .HasColumnType("int")
                        .HasColumnName("DataCatalogProduct_IDKGCatalog");

                    b.Property<int>("Price_KGPriceKG_id")
                        .HasColumnType("int")
                        .HasColumnName("DataCatalogProduct_IDPriceKG");

                    b.HasKey("DataCatalogProduct_id");

                    b.HasIndex("CatalogProductionCatalogProduction_id");

                    b.HasIndex("KG_CatalogKGCatalog_id");

                    b.HasIndex("Price_KGPriceKG_id");

                    b.ToTable("DataCatalogProduct");
                });

            modelBuilder.Entity("Domain.ImageCatalogProduction", b =>
                {
                    b.Property<int>("ImageCatalogProduction_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageCatalogProduction_id"));

                    b.Property<int>("CatalogProductionCatalogProduction_id")
                        .HasColumnType("int")
                        .HasColumnName("ImageCatalogProduction_IDCatalogProduction");

                    b.Property<DateTime>("ImageCatalogProduction_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImageCatalogProduction_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageCatalogProduction_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ImageCatalogProduction_updted")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageCatalogProduction_id");

                    b.HasIndex("CatalogProductionCatalogProduction_id");

                    b.ToTable("ImageCatalogProduction");
                });

            modelBuilder.Entity("Domain.ImageRawMaterial", b =>
                {
                    b.Property<int>("ImageRawMaterial_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageRawMaterial_id"));

                    b.Property<DateTime>("ImageRawMaterial_fechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImageRawMaterial_fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImageRawMaterial_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageRawMaterial_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RawMaterialRawMateria_id")
                        .HasColumnType("int")
                        .HasColumnName("ImageRawMaterial_IDRawMaterial");

                    b.HasKey("ImageRawMaterial_id");

                    b.HasIndex("RawMaterialRawMateria_id");

                    b.ToTable("ImageRawMaterial");
                });

            modelBuilder.Entity("Domain.KG_Catalog", b =>
                {
                    b.Property<int>("KGCatalog_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KGCatalog_id"));

                    b.Property<double>("KGCatalog_cantidad")
                        .HasColumnType("float");

                    b.Property<DateTime>("KGCatalog_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KGCatalog_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("KGCatalog_updated")
                        .HasColumnType("datetime2");

                    b.HasKey("KGCatalog_id");

                    b.ToTable("KG_Catalog");
                });

            modelBuilder.Entity("Domain.KgMonitoring", b =>
                {
                    b.Property<int>("KgMonitoring_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KgMonitoring_id"));

                    b.Property<double>("KgMonitoring_KGStandard")
                        .HasColumnType("float");

                    b.Property<double>("KgMonitoring_Total")
                        .HasColumnType("float");

                    b.Property<DateTime>("KgMonitoring_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KgMonitoring_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("KgMonitoring_priceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KgMonitoring_priceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("KgMonitoring_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("RawMaterialRawMateria_id")
                        .HasColumnType("int")
                        .HasColumnName("KgMonitoring_IDRawMaterial");

                    b.HasKey("KgMonitoring_id");

                    b.HasIndex("RawMaterialRawMateria_id");

                    b.ToTable("KgMonitoring");
                });

            modelBuilder.Entity("Domain.MaterialProduction", b =>
                {
                    b.Property<int>("MaterialProduction_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialProduction_id"));

                    b.Property<double>("MaterialProduction_KGUsed")
                        .HasColumnType("float");

                    b.Property<DateTime>("MaterialProduction_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialProduction_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MaterialProduction_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionProduction_id")
                        .HasColumnType("int")
                        .HasColumnName("MaterialProduction_IDProduction");

                    b.Property<int>("RawMaterialRawMaterial_id")
                        .HasColumnType("int")
                        .HasColumnName("MaterialProduction_IDRawMaterial");

                    b.HasKey("MaterialProduction_id");

                    b.HasIndex("ProductionProduction_id");

                    b.HasIndex("RawMaterialRawMaterial_id");

                    b.ToTable("MaterialProduction");
                });

            modelBuilder.Entity("Domain.Price_KG", b =>
                {
                    b.Property<int>("PriceKG_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceKG_id"));

                    b.Property<DateTime>("PriceKG_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PriceKG_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceKG_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PriceKG_updated")
                        .HasColumnType("datetime2");

                    b.HasKey("PriceKG_id");

                    b.ToTable("Price_KG");
                });

            modelBuilder.Entity("Domain.ProductManufactured", b =>
                {
                    b.Property<int>("ProductManufactured_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductManufactured_id"));

                    b.Property<int>("DataCatalogProductDataCatalogProduct_id")
                        .HasColumnType("int")
                        .HasColumnName("ProductManufactured_IDDataCatalogProduct");

                    b.Property<int>("ProductManufactured_count")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductManufactured_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductManufactured_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ProductManufactured_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionProduction_id")
                        .HasColumnType("int")
                        .HasColumnName("ProductManufactured_IDProduction");

                    b.HasKey("ProductManufactured_id");

                    b.HasIndex("DataCatalogProductDataCatalogProduct_id");

                    b.HasIndex("ProductionProduction_id");

                    b.ToTable("ProductManufactured");
                });

            modelBuilder.Entity("Domain.Production", b =>
                {
                    b.Property<int>("Production_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Production_id"));

                    b.Property<int>("CatalogProductionCatalogProduction_id")
                        .HasColumnType("int")
                        .HasColumnName("Production_IDCatalogProduction");

                    b.Property<double>("Production_KGTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("Production_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Production_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Production_status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Production_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfileProfile_id")
                        .HasColumnType("int")
                        .HasColumnName("Production_IDProfile");

                    b.HasKey("Production_id");

                    b.HasIndex("CatalogProductionCatalogProduction_id");

                    b.HasIndex("ProfileProfile_id");

                    b.ToTable("Production");
                });

            modelBuilder.Entity("Domain.Profile", b =>
                {
                    b.Property<int>("Profile_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Profile_id"));

                    b.Property<DateTime>("Profile_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Profile_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Profile_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolRol_id")
                        .HasColumnType("int")
                        .HasColumnName("Profile_IDRol");

                    b.Property<int>("UserUser_id")
                        .HasColumnType("int")
                        .HasColumnName("Profile_IDUser");

                    b.HasKey("Profile_id");

                    b.HasIndex("RolRol_id");

                    b.HasIndex("UserUser_id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Domain.RawMaterial", b =>
                {
                    b.Property<int>("RawMateria_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RawMateria_id"));

                    b.Property<double>("RawMaterial_KgTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("RawMaterial_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RawMaterial_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawMaterial_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RawMaterial_updated")
                        .HasColumnType("datetime2");

                    b.HasKey("RawMateria_id");

                    b.ToTable("RawMaterial");
                });

            modelBuilder.Entity("Domain.Rol", b =>
                {
                    b.Property<int>("Rol_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Rol_id"));

                    b.Property<DateTime>("Rol_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rol_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Rol_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Rol_status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Rol_updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Rol_id");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Property<int>("Sale_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sale_id"));

                    b.Property<int>("DataCatalogProductDataCatalogProduct_id")
                        .HasColumnType("int")
                        .HasColumnName("Sale_IDDataCatalogProduct");

                    b.Property<int>("Sale_count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Sale_created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Sale_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Sale_priceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Sale_updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Sale_id");

                    b.HasIndex("DataCatalogProductDataCatalogProduct_id");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_id"));

                    b.Property<string>("User_CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_cel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("User_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("User_lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("User_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Accounting", b =>
                {
                    b.HasOne("Domain.KgMonitoring", "KgMonitoring")
                        .WithMany("Accountings")
                        .HasForeignKey("KgMonitoringKgMonitoring_id");

                    b.HasOne("Domain.Sale", "Sale")
                        .WithMany("Accountings")
                        .HasForeignKey("SaleSale_id");

                    b.Navigation("KgMonitoring");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Domain.DataCatalogProduct", b =>
                {
                    b.HasOne("Domain.CatalogProduction", "CatalogProduction")
                        .WithMany("DataCatalogProduct")
                        .HasForeignKey("CatalogProductionCatalogProduction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.KG_Catalog", "KG_Catalog")
                        .WithMany("DataCatalogProducts")
                        .HasForeignKey("KG_CatalogKGCatalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Price_KG", "Price_KG")
                        .WithMany("DataCatalogProducts")
                        .HasForeignKey("Price_KGPriceKG_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogProduction");

                    b.Navigation("KG_Catalog");

                    b.Navigation("Price_KG");
                });

            modelBuilder.Entity("Domain.ImageCatalogProduction", b =>
                {
                    b.HasOne("Domain.CatalogProduction", "CatalogProduction")
                        .WithMany("ImageCatalogProductions")
                        .HasForeignKey("CatalogProductionCatalogProduction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogProduction");
                });

            modelBuilder.Entity("Domain.ImageRawMaterial", b =>
                {
                    b.HasOne("Domain.RawMaterial", "RawMaterial")
                        .WithMany("ImageRawMaterials")
                        .HasForeignKey("RawMaterialRawMateria_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Domain.KgMonitoring", b =>
                {
                    b.HasOne("Domain.RawMaterial", "RawMaterial")
                        .WithMany("KgMonitorings")
                        .HasForeignKey("RawMaterialRawMateria_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Domain.MaterialProduction", b =>
                {
                    b.HasOne("Domain.Production", "Production")
                        .WithMany("MaterialProductions")
                        .HasForeignKey("ProductionProduction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.RawMaterial", "RawMaterial")
                        .WithMany("MaterialProductions")
                        .HasForeignKey("RawMaterialRawMaterial_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Domain.ProductManufactured", b =>
                {
                    b.HasOne("Domain.DataCatalogProduct", "DataCatalogProduct")
                        .WithMany("ProductManufactureds")
                        .HasForeignKey("DataCatalogProductDataCatalogProduct_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Production", "Production")
                        .WithMany("ProductManufactureds")
                        .HasForeignKey("ProductionProduction_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataCatalogProduct");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("Domain.Production", b =>
                {
                    b.HasOne("Domain.CatalogProduction", "CatalogProduction")
                        .WithMany("Productions")
                        .HasForeignKey("CatalogProductionCatalogProduction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileProfile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogProduction");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Profile", b =>
                {
                    b.HasOne("Domain.Rol", "Rol")
                        .WithMany("Profiles")
                        .HasForeignKey("RolRol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserUser_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.HasOne("Domain.DataCatalogProduct", "DataCatalogProduct")
                        .WithMany("Sales")
                        .HasForeignKey("DataCatalogProductDataCatalogProduct_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataCatalogProduct");
                });

            modelBuilder.Entity("Domain.CatalogProduction", b =>
                {
                    b.Navigation("DataCatalogProduct");

                    b.Navigation("ImageCatalogProductions");

                    b.Navigation("Productions");
                });

            modelBuilder.Entity("Domain.DataCatalogProduct", b =>
                {
                    b.Navigation("ProductManufactureds");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Domain.KG_Catalog", b =>
                {
                    b.Navigation("DataCatalogProducts");
                });

            modelBuilder.Entity("Domain.KgMonitoring", b =>
                {
                    b.Navigation("Accountings");
                });

            modelBuilder.Entity("Domain.Price_KG", b =>
                {
                    b.Navigation("DataCatalogProducts");
                });

            modelBuilder.Entity("Domain.Production", b =>
                {
                    b.Navigation("MaterialProductions");

                    b.Navigation("ProductManufactureds");
                });

            modelBuilder.Entity("Domain.RawMaterial", b =>
                {
                    b.Navigation("ImageRawMaterials");

                    b.Navigation("KgMonitorings");

                    b.Navigation("MaterialProductions");
                });

            modelBuilder.Entity("Domain.Rol", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Navigation("Accountings");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
